- hosts: all
  gather_facts: true
  vars:
    IJAVAVER: "1.3.0"
    KUBECTLVER: "1.21.6"

  tasks:
    - name: Include variables for the underlying distribution
      include_vars: "{{ ANSIBLEDIR }}/group_vars/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"

    - name: Base setup for a JupyterHub environment server or appliance
      include_tasks: "{{ ANSIBLEDIR }}/setup_base_appliance.yml"

    - name: Add CentOS SC repository into repo list
      become: true
      become_user: root
      yum:
        name: centos-release-scl-rh
        state: present
      when:
        - ansible_distribution == "CentOS"
        - ansible_distribution_major_version >= "7"

    - name: Enable Powertools repo for Rocky 
      become: true
      become_user: root
      lineinfile:
        path: "/etc/yum.repos.d/Rocky-PowerTools.repo"
        line: 'enabled=1'
        state: present
      when:
        - ansible_distribution == "Rocky"
        - ansible_distribution_major_version >= "8"

    - name: Add conda GPG Key to APT
      become: true
      become_user: root
      apt_key:
        url: https://repo.anaconda.com/pkgs/misc/gpgkeys/anaconda.asc
        state: present
      when:
        - ansible_distribution == "Ubuntu"
        - ansible_distribution_major_version >= "20"

      # TODO: Do it for EPEL if really needed
    - name: Add conda APT repository
      become: true
      become_user: root
      apt_repository:
        repo: deb [arch=amd64] https://repo.anaconda.com/pkgs/misc/debrepo/conda stable main
        state: present
      when:
        - ansible_distribution == "Ubuntu"
        - ansible_distribution_major_version >= "20"

    - name: Add Hashicorp GPG Key to APT
      become: true
      become_user: root
      apt_key:
        url: https://apt.releases.hashicorp.com/gpg
        state: present
      when:
        - ansible_distribution == "Ubuntu"
        - ansible_distribution_major_version >= "20"

    - name: Add Hashicorp APT repository
      become: true
      become_user: root
      apt_repository:
        repo: deb [arch=amd64] https://apt.releases.hashicorp.com focal main
        state: present
      when:
        - ansible_distribution == "Ubuntu"
        - ansible_distribution_major_version >= "20"

    - name: Add Hashicorp GPG Key to RPM DB
      become: true
      become_user: root
      rpm_key:
        key: https://rpm.releases.hashicorp.com/gpg
        state: present
      when:
        - ansible_distribution == "CentOS" or ansible_distribution == "Rocky"

    - name: Add Hashicorp YUM repository
      become: true
      become_user: root
      yum_repository:
        name: hashicorp
        baseurl: "https://rpm.releases.hashicorp.com/RHEL/{{ ansible_distribution_major_version }}/x86_64/stable"
        description: "Upstream Hashicorp Yum repository"
        enabled: true
        state: present
      when:
        - ansible_distribution == "CentOS" or ansible_distribution == "Rocky"

    - name: Add K8s GPG Key to APT
      become: true
      become_user: root
      apt_key:
        url: https://packages.cloud.google.com/apt/doc//apt-key.gpg
        state: present
      when:
       - ansible_os_family == "Debian"

    - name: Add K8s GPG Key to RPM DB
      become: true
      become_user: root
      rpm_key:
        key: "{{ item }}"
        state: present
      with_items:
        - https://packages.cloud.google.com/yum/doc/yum-key.gpg
        - https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      when:
        - ansible_distribution == "CentOS" or ansible_distribution == "Rocky"

    - name: Add K8s APT repository
      become: true
      become_user: root
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
      when:
        - ansible_distribution == "Ubuntu"
        - ansible_distribution_major_version == "20"

    - name: Add Golang APT repository
      become: true
      become_user: root
      apt_repository:
        repo: ppa:longsleep/golang-backports
        state: present
      when:
        - ansible_distribution == "Ubuntu"
        - ansible_distribution_major_version <= "20"

    - name: Add K8s YUM repository
      become: true
      become_user: root
      yum_repository:
        name: k8s
        baseurl: "https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch"
        description: "Upstream K8s Yum repository"
        enabled: true
        state: present
      when:
        - ansible_distribution == "CentOS" or ansible_distribution == "Rocky"

    - name: Remove Microsoft repo file just in case
      become: true
      become_user: root
      file:
        path: /etc/apt/sources.list.d/microsoft-prod.list
        state: absent
      when:
       - ansible_os_family == "Debian"

    - name: Remove MicroSoft repo package
      become: true
      become_user: root
      package:
        name:
        - packages-microsoft-prod
        state: absent

    - name: Add Microsoft GPG Key to RPM DB
      become: true
      become_user: root
      rpm_key:
        key: "https://packages.microsoft.com/keys/microsoft.asc"
        state: present
      when:
        - ansible_distribution == "Rocky"

    - name: Setup MicroSoft repo for APT
      become: true
      become_user: root
      apt:
        deb: https://packages.microsoft.com/config/ubuntu/{{ ansible_distribution_version }}/packages-microsoft-prod.deb
      when:
        - ansible_distribution == "Ubuntu"
        - ansible_distribution_major_version >= "20"

    - name: Setup MicroSoft repo for YUM
      become: true
      become_user: root
      yum:
        name: "https://packages.microsoft.com/config/rhel/{{ ansible_distribution_major_version }}/packages-microsoft-prod.rpm"
        state: present
      when:
        - ansible_distribution == "CentOS" or ansible_distribution == "Rocky"

    - name: Update apt cache
      become: true
      become_user: root
      apt:
        update_cache: true
      changed_when: false
      when:
        - ansible_os_family == "Debian"

    - name: Ensure all non-required packages are uninstalled
      become: true
      become_user: root
      package:
        name:
        - kubectl
        - aspnetcore-runtime-3.1
        - aspnetcore-runtime-5.0
        - dotnet-runtime-3.1
        - dotnet-runtime-5.0
        - dotnet-sdk-3.1
        - dotnet-sdk-5.0
        - powershell
        state: absent

    - name: Ensure all non-required APT packages are uninstalled
      become: true
      become_user: root
      package:
        name:
        - golang
      when:
       - ansible_distribution == "Ubuntu"
       - ansible_distribution_major_version <= "20"

    - name: Ensure all required packages are installed
      become: true
      become_user: root
      package:
        name:
        - ansible
        - python3
        - python3-pip
        - python3-jmespath
        - python3-virtualenv
        - python3-wheel
        - git
        - rsync
        - acl
        - wget
        - bzip2
        - firefox
        - jq
        - httpie
        - moreutils
        - net-tools
        - nodejs
        - npm
        - telnet
        - pandoc
        - clang
        - cmake
        - texlive-xetex
        - aspnetcore-runtime-6.0
        - dotnet-runtime-6.0
        - dotnet-sdk-6.0
        - aspnetcore-runtime-7.0
        - dotnet-runtime-7.0
        - dotnet-sdk-7.0
        - dotnet-host-7.0
        - aspnetcore-runtime-8.0
        - dotnet-runtime-8.0
        - dotnet-sdk-8.0
        - dotnet-host
        - postfix
        - procmail
        - conda
        - libgdiplus
        - cargo
        - rustc
        - man
        - unzip
        - shc
        - patch
        - expect
        - netcat
        - terraform
        state: present
        update_cache: true

    - name: Ensure all required DEB packages are installed
      become: true
      become_user: root
      apt:
        pkg:
        - python3-dev
        - python3-venv
        - python3-ipywidgets
        - apt-file
        - ldap-utils
        - default-jre
        - default-jdk
        - texlive-fonts-recommended
        - texlive-latex-recommended
        - software-properties-common
        - lld
        - libzmq3-dev
        - libc6-dev
        - nfs-common
        - libcrypt-passwdmd5-perl
        - libopenmpi-dev
        - fail2ban
        - libproc-processtable-perl
        - acct
      when:
        - ansible_os_family == "Debian"

    - name: Ensure all required APT packages are installed
      become: true
      become_user: root
      package:
        name:
        - golang
      when:
        - ansible_distribution == "Ubuntu"
        - ansible_distribution_major_version > "20"

    - name: Ensure all required APT packages are installed
      become: true
      become_user: root
      package:
        name:
        - golang-go
      when:
        - ansible_distribution == "Ubuntu"
        - ansible_distribution_major_version <= "20"

    - name: Ensure all required RPM packages are installed
      become: true
      become_user: root
      package:
        pkg:
        - python3-devel
        - openldap-clients
        - glibc-devel
        - java
        - nfs-utils
        - zeromq-devel
        - perl-Crypt-PasswdMD5
        - openmpi-devel
        - fail2ban-all
        - perl-Proc-ProcessTable
        - perl-Data-Dumper
        - psacct
        - golang
        state: present
      when:
        - ansible_distribution == "CentOS" or ansible_distribution == "Rocky"

    - name: Ensure all required CentOS RPM packages are installed
      become: true
      become_user: root
      yum:
        name: llvm-toolset-7.0-lld
        state: present
      when:
        - ansible_distribution == "CentOS"

    - name: Ensure all required node.js packages are installed
      become: true
      become_user: root
      command: npm install -g "{{ item }}"
      with_items:
        - json
        - configurable-http-proxy

    - name: Remove a set of existing pip packages
      pip:
        name:
        - jupyterhub
        - jupyterlab
        - jupyterhub-idle-culler
        - ansible-kernel
        - bash_kernel
        - sshkernel
        - powershell_kernel
        - kotlin-jupyter-kernel
        - redfish
        - jupyter-docx-bundler
        - requests
        - PyYAML
        - findspark
        - jwt
        - jinja2-cli
        - determined
        state: absent
        virtualenv: "{{ JPHUB }}"
        virtualenv_command: "{{ virtualenv_command }}"
        virtualenv_python: "{{ virtualenv_python }}"
      when: CLEAN|bool
      ignore_errors: true

    - name: Remove directory "{{ JPHUB }}"
      become: true
      become_user: root
      file:
        path: "{{ JPHUB }}"
        state: absent
      when: CLEAN|bool

    - name: Create directory "{{ JPHUB }}" if needed
      become: true
      become_user: root
      file:
        path: "{{ JPHUB }}"
        state: directory
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: 0751

    - name: Ensure all additional pip packages are installed
      pip:
        name:
        - ipywidgets
        state: present
        virtualenv: "{{ JPHUB }}"
        virtualenv_command: "{{ virtualenv_command }}"
        virtualenv_python: "{{ virtualenv_python }}"
      when:
        - ansible_distribution == "CentOS" or ansible_distribution == "Rocky"

    - name: Ensure jupyterhub pip packages is installed on CentOS
      pip:
        name:
        - jupyterhub
        state: present
        virtualenv: "{{ JPHUB }}"
        virtualenv_command: "{{ virtualenv_command }}"
        virtualenv_python: "{{ virtualenv_python }}"
      when:
        - ansible_distribution == "CentOS"

    - name: Ensure jupyterhub pip packages is installed
      pip:
        name:
        - jupyterhub==3.1.1
        state: present
        virtualenv: "{{ JPHUB }}"
        virtualenv_command: "{{ virtualenv_command }}"
        virtualenv_python: "{{ virtualenv_python }}"
      when:
        - ansible_distribution != "CentOS"

    - name: Ensure all required pip packages are installed
      pip:
        name:
        - jupyterlab
        - jupyterhub-idle-culler
        - ansible-kernel>=0.9.0
        - bash_kernel>=0.7.2
        - sshkernel>=0.11.1
        - redfish
        - jupyter-docx-bundler
        - requests
        - PyYAML
        - findspark
        - jwt
        - jinja2-cli
        - determined
        state: present
        virtualenv: "{{ JPHUB }}"
        virtualenv_command: "{{ virtualenv_command }}"
        virtualenv_python: "{{ virtualenv_python }}"

    - name: Ensure Go kernel is installed
      shell: env GO111MODULE=off go get -d -u github.com/gopherdata/gophernotes && cd "{{ ansible_env.HOME }}/go/src/github.com/gopherdata/gophernotes" && env GO111MODULE=off go install && mkdir -p {{ JPHUB }}/share/jupyter/kernels/gophernotes && cp kernel/* {{ JPHUB }}/share/jupyter/kernels/gophernotes

    - name: Ensure required directories under /usr/local are owned by "{{ WODUSER }}"
      become: true
      become_user: root
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: 0755
      with_items:
        - /usr/local/bin
        - /usr/local/share

    - name: Make gophernotes available under /usr/local/bin
      become: true
      become_user: root
      copy:
        src: "{{ ansible_env.HOME }}/go/bin/gophernotes"
        dest: /usr/local/bin/gophernotes
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: 0755

    - name: Cleanup intermediate go directory
      become: true
      become_user: root
      file:
        path: '{{ ansible_env.HOME }}/go'
        state: absent

    - name: Ensure that this a compliant WoD system
      include_tasks: "{{ ANSIBLEDIR }}/check_system.yml"

    # In this part we manage the jupyterhub setup
    #
    - name: Make kernel_python available under /usr/local/bin
      become: true
      become_user: root
      copy:
        src: "{{ SYSDIR }}/kernel_python"
        dest: /usr/local/bin/kernel_python
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: 0755

    - name: Fix python kernel path to include virtualenv setup
      lineinfile:
        path: "{{ JPHUB }}/share/jupyter/kernels/python3/kernel.json"
        regexp: '^\s*"python",$'
        line: '   "/usr/local/bin/kernel_python",'
        state: present

    - name: Ensure Rust kernel directory is installed
      become: true
      become_user: root
      file:
        path: "{{ JPHUB }}//share/jupyter/kernels/rust"
        state: directory
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: 0751

    - name: Deliver build scripts under /usr/local/bin
      become: true
      become_user: root
      template: src={{ item }} dest=/usr/local/bin/{{ item | basename | regex_replace('\.j2$') }} mode=0755
      with_fileglob: [ '{{ SCRIPTDIR }}//build*.sh.j2' ]

    - name: Ensure Rust kernel is installed
      shell: . '{{ JPHUB }}/bin/activate' && "{{ SYSDIR }}/evcxr_jupyter.{{ ansible_distribution }}-{{ ansible_distribution_major_version }}" --install

    - name: Ensure Rust kernel files are installed
      copy:
        src: "{{ item }}"
        dest: "{{ JPHUB }}//share/jupyter/kernels/rust/{{ item | basename }}"
        mode: 0644
      with_fileglob: [ '{{ ansible_env.HOME }}/.local/share/jupyter/kernels/rust/*' ]

    - name: Ensure Rust kernel is deployed
      become: true
      become_user: root
      copy:
        src: "{{ SYSDIR }}/evcxr_jupyter.{{ ansible_distribution }}-{{ ansible_distribution_major_version }}"
        dest: "/usr/local/bin/evcxr_jupyter"
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: 0755

    - name: Extract iJava kernel
      unarchive:
        src: https://github.com/SpencerPark/IJava/releases/download/v{{ IJAVAVER }}/ijava-{{ IJAVAVER }}.zip
        dest: "{{ ansible_env.HOME }}"
        remote_src: true

    - name: Ensure jupyterhub IJava kernel is installed
      shell: . '{{ JPHUB }}/bin/activate' && cd {{ ansible_env.HOME }} && python3 install.py --prefix={{ JPHUB }}

    #- name: Ensure jupyterhub docx bundle is installed
    #  shell: . '{{ JPHUB }}/bin/activate' && cd {{ ansible_env.HOME }} && jupyter bundlerextension enable --py jupyter_docx_bundler --sys-prefix

    - name: Ensure jupyterhub ssh kernel is installed
      shell: . '{{ JPHUB }}/bin/activate' && python3 -m sshkernel install --sys-prefix

    - name: Ensure jupyterhub kernels are installed
      shell: . '{{ JPHUB }}/bin/activate' && python3 -m "{{ item }}.install" --prefix={{ JPHUB }}
      with_items:
        - bash_kernel
        - ansible_kernel
      changed_when: false

    - name: Fix ansible kernel path to include virtualenv setup
      replace:
        path: "{{ JPHUB }}/share/jupyter/kernels/{{ item }}/kernel.json"
        regexp: '(.+)"{{ JPHUB }}/bin/python3",(.+)$'
        replace: '\1"/usr/local/bin/kernel_python",\2'
      with_items:
        - ansible
        - ssh

    - name: Check whether to patch ansible kernel
      command: "grep Loader=yaml.FullLoader {{ JPHUB }}/{{ python_lib }}/ansible_kernel/convert_playbook.py"
      register: patch_done
      failed_when: false
      changed_when: false

    #- name: Patch ansible kernel with fixes coming from master
     # ansible.posix.patch:
      #  src: "{{ SYSDIR }}/master-vs-0.9.0.patch"
       # basedir: "{{ JPHUB }}/{{ python_lib }}/ansible_kernel"
        #strip: 2
        #backup: true
      #when: patch_done.rc != 0

    - name: Remove former kernel files installed locally
      file:
        path: '{{ ansible_env.HOME }}/.local/share/jupyter/kernels'
        state: absent

    - name: Ensure powershell is removed through dotnet before installing
      become: true
      become_user: root
      command: "{{ dotnetpath }}/dotnet tool uninstall --global powershell"
      ignore_errors: true

    - name: Ensure dotnet interactive is removed through dotnet before installing
      become: true
      become_user: root
      command: "{{ dotnetpath }}/dotnet tool uninstall --global Microsoft.dotnet-interactive"
      ignore_errors: true

    - name: Remove old MS tools to be sure a good one will be available
      become: true
      become_user: root
      file:
        path: /usr/local/bin/{{ item }}
        state: absent
      with_items:
        - pwsh
        - powershell
        - dotnet
        - dotnet-interactive      
        
    - name: Remove pwsh components to be sure a good one will be available
      become: true
      become_user: root
      file:
        path: /usr/local/bin/.store
        state: absent

    # Incorrect CentOS v7 package vs Ubuntu which provides /usr/bin/dotnet
    - name: Ensure dotnet link is correct if needed
      become: true
      become_user: root
      file:
        src: "{{ dotnetpath }}/dotnet"
        dest: /usr/local/bin/dotnet
        state: link
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: 0755
        force: true
      when:
        - ansible_distribution == "CentOS" or ansible_distribution == "Rocky"

    - name: Fix again bad packaging from MS on dotnet sdk for v7.0 :-(
      become: true
      become_user: root
      file:
        src: "/usr/share/dotnet/{{ item }}"
        dest: "/usr/lib/dotnet/{{ item }}"
        state: link
        force: true
      with_items:
        - sdk
        - sdk-manifests
        - templates
      when:
        - ansible_distribution == "Ubuntu"
        - ansible_distribution_major_version == "22"

    - name: Ensure powershell is installed through dotnet
      become: true
      become_user: root
      command: "{{ dotnetpath }}/dotnet tool install --tool-path /usr/local/bin powershell"

    - name: Ensure dotnet interactive is installed through dotnet
      become: true
      become_user: root
      command: "{{ dotnetpath }}/dotnet tool install --tool-path /usr/local/bin Microsoft.dotnet-interactive"

    - name: Ensure dotnet kernel is installed
      become: true
      become_user: root
      command: /usr/local/bin/dotnet-interactive jupyter install --path "{{ JPHUB }}/share/jupyter/kernels"

    - name: Ensure that directory "{{ JPHUB }}/etc/jupyterhub" exists
      file:
        path: "{{ JPHUB }}/etc/jupyterhub"
        state: directory
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: 0751


    - name: Disable WoD services
      become: true
      become_user: root
      systemd:
        state: stopped
        daemon_reload: true
        enabled: false
        name: "{{ item }}"
      ignore_errors: true
      with_items:
        - jupyterhub
        - wod-kill-processes

    - name: Remove jupyterhub configuration file
      become: true
      become_user: root
      file:
        path: "{{ JPHUB }}/etc/jupyterhub/jupyterhub_config.py"
        state: absent

    - name: Remove jupyterhub db
      become: true
      become_user: root
      file:
        path: "{{ JPHUB }}/lib/jupyterhub.sqlite"
        state: absent

    - name: Generate jupyterhub configuration
      command: "{{ JPHUB }}/bin/jupyterhub --generate-config"
      args:
        chdir: "{{ JPHUB }}/etc/jupyterhub/"

    - name: Existing token
      debug:
        msg: "Existing token: {{ WODBETOKEN }}"

    - name: Adapt jupyterhub configuration file
      blockinfile:
        path: "{{ JPHUB }}/etc/jupyterhub/jupyterhub_config.py"
        block: |
         #######################################################################################
         c.Spawner.default_url = '/lab'
         c.JupyterHub.tornado_settings = {'cookie_options': {'expires_days': 0.17}}
         c.JupyterHub.shutdown_on_logout = True
         c.JupyterHub.redirect_to_server = True
         c.JupyterHub.db_url = 'sqlite:///jupyterhub.sqlite'
         c.JupyterHub.pid_file = 'jupyterhub.pid'
         c.JupyterHub.cookie_secret_file = 'jupyterhub_cookie_secret'
         c.JupyterHub.port = "{{ WODBEPORT }}"
         c.JupyterHub.services = [
                {
                "name": "admintk",
                "api_token": "{{ WODBETOKEN }}"
                }
                ]
         c.JupyterHub.load_roles = [
                  {
            "name": "jupyteradm",
            "description": "Elevated privileges (can do anything)",
            "scopes": [
                "admin:users",
                "admin:groups",
                "admin:servers",
                "read:roles",
                "tokens",
                "list:users",
                "list:services",
                "read:services",
                "read:hub",
                "access:services",
                "access:servers",
                "proxy",
                "shutdown"
            ],
            "users": ["{{ WODUSER }}"]
                 },
                {
            "name": "jupyteradmin",
            "scopes": [
                "admin:users",
                "admin:groups",
                "admin:servers",
                "read:roles",
                "tokens",
                "list:services",
                "read:services",
                "read:hub",
                "access:services",
                "access:servers",
                "proxy",
                "shutdown"
                ],
            "services": [
                "admintk"
                ]
                }
            ]
          #####################################################################################
   
    - name: Copy WoD service file as ansible template for variable expansion
      become: yes
      become_user: root
      template: src={{ item }} dest=/etc/systemd/system/{{ item | basename | regex_replace('\.j2$') }} mode=0644
      with_fileglob: [ '{{ SYSDIR }}//jupyterhub.service.j2', '{{ SYSPRIVDIR }}//jupyterhub.service.j2' ]

    - name: Enable WoD service
      become: true
      become_user: root
      systemd:
        state: started
        daemon_reload: true
        enabled: true
        name: "{{ item }}"
      with_items:
        - jupyterhub

    - name: Wait 5 seconds to let WoD services start
      shell: sleep 5

      #- name: Setup {{ WODUSER }} account in jupyterhub
      #uri:
      #url: "{{ WODBEAPIURL }}/hub/api/users"
      #headers:
      #Authorization: "token {{ WODBETOKEN }}"
      #method: POST
      #body_format: json
      #body: '{ "usernames": [ "{{ WODUSER }}" ], "admin": true }'
      #status_code: 201

    - name: Setup group admin in jupyterhub
      uri:
        url: "{{ WODBEAPIURL }}/hub/api/groups/admingroup"
        headers:
          Authorization: "token {{ WODBETOKEN }}"
        method: POST
        body_format: json
        body: '{ "users": [ "{{ WODUSER }}" ], "roles": [ "jupyteradm" ], "name": "admingroup"}'
        status_code: 201

    - name: Setup ansible configuration
      copy:
        src: "{{ WODBEDIR }}/.ansible.cfg"
        dest: "{{ ansible_env.HOME }}/.ansible.cfg"
        mode: 0644

    - name: Enable postfix service
      become: true
      become_user: root
      systemd:
        state: started
        daemon_reload: true
        enabled: true
        name: postfix

    - name: Configure fail2ban filter
      become: true
      become_user: root
      copy:
        src: "{{ SYSDIR }}/fail2ban.conf"
        dest: "/etc/fail2ban/filter.d/jupyterhub.conf"
        owner: root
        group: root
        mode: 0644

    - name: Configure fail2ban jail
      become: true
      become_user: root
      copy:
        src: "{{ SYSDIR }}/fail2ban.jail"
        dest: "/etc/fail2ban/jail.local"
        owner: root
        group: root
        mode: 0644

    - name: Configure fail2ban action
      become: true
      become_user: root
      copy:
        src: "{{ SYSDIR }}/fail2ban.action"
        dest: "/etc/fail2ban/action.d/jupyterhub.conf"
        owner: root
        group: root
        mode: 0755

    - name: Enable fail2ban
      become: true
      become_user: root
      systemd:
        state: started
        daemon_reload: true
        enabled: true
        name: fail2ban

    # On CentOS 7 we need to remove strict mode for sshd to work with our conf (mode 770 needed for user home dirs)
    - name: Fix sshd conf on CentOS/Rocky
      become: true
      become_user: root
      lineinfile:
        path: "/etc/ssh/sshd_config"
        line: 'StrictModes no'
        state: present
      when:
        - ansible_distribution == "CentOS" or ansible_distribution == "Rocky"

    - name: restart sshd service
      become: true
      become_user: root
      systemd:
        state: restarted
        daemon_reload: true
        enabled: true
        name: sshd
      when:
        - ansible_distribution == "CentOS" or ansible_distribution == "Rocky"

    - name: Test whether notebooks are already available
      command: ls "{{ WODNOBO }}/README.md"
      register: nobo_path
      failed_when: false
      changed_when: false

    # For this to work, you need to have a key used in deploy key of the projects
    - name: Checkout notebooks from the wod-notebooks git repo
      git:
        repo: https://github.com/Workshops-on-Demand/wod-notebooks.git
        dest: "{{ WODNOBO }}"
      when:
        - nobo_path.rc != 0

    - name: Test private tasks YAML file
      command: ls "{{ ANSIBLEPRIVDIR }}/install_backend.yml"
      register: acj_path
      failed_when: false
      changed_when: false

    - name: Now call private tasks if available
      include_tasks: "{{ ANSIBLEPRIVDIR }}/install_backend.yml"
      when:
        - acj_path.rc == 0
