---
- name: Playbook for WoD frontend server installation
  hosts: all
  gather_facts: true

  tasks:
    - name: Include variables for the underlying distribution
      ansible.builtin.include_vars: "{{ ANSIBLEDIR }}/group_vars/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"

    - name: Base setup for a base system
      ansible.builtin.include_tasks: "{{ ANSIBLEDIR }}/install_base_system.yml"

    - name: Add ubuntu updates GPG Key to APT
      become: true
      become_user: root
      ansible.builtin.apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present
      when:
        - ansible_os_family == "Debian"

    - name: Nodejs 20.x repo needs to be used
      become: true
      become_user: root
      ansible.builtin.apt_repository:
        repo: deb https://deb.nodesource.com/node_20.x jammy main
        state: present
      when:
        - ansible_os_family == "Debian"

    - name: Nodejs repo needs to be pinned
      become: true
      become_user: root
      ansible.builtin.blockinfile:
        path: /etc/apt/preferences.d/nodejs
        owner: root
        group: root
        mode: "0644"
        backup: true
        create: true
        state: present
        block: |
          Package: nodejs
          Pin: origin deb.nodesource.com
          Pin-Priority: 600
      when:
        - ansible_os_family == "Debian"

    - name: Ensure all non-required packages are uninstalled
      become: true
      become_user: root
      ansible.builtin.package:
        name:
          - nodejs
          - libnode-dev
          - libnode72
        state: absent

    - name: Ensure all required packages are installed
      become: true
      become_user: root
      ansible.builtin.package:
        name:
          - ansible
          - git
          - rsync
          - wget
          - bzip2
          - jq
          - moreutils
          - net-tools
          - nodejs
          - npm
          - telnet
          - man
          - unzip
          - netcat
        state: present
        update_cache: true

    - name: Ensure all required DEB packages are installed
      become: true
      become_user: root
      ansible.builtin.apt:
        pkg:
          - apt-file
          - ldap-utils
          - fail2ban
          - libproc-processtable-perl
          - acct
          - yarn
      when:
        - ansible_os_family == "Debian"

    - name: Ensure all required RPM packages are installed
      become: true
      become_user: root
      ansible.builtin.yum:
        pkg:
          - openldap-clients
          - perl-Crypt-PasswdMD5
          - fail2ban-all
          - perl-Proc-ProcessTable
          - perl-Data-Dumper
          - psacct
      when:
        - ansible_distribution == "CentOS"
        - ansible_distribution_major_version >= "7"

    - name: Ensure required directories under /usr/local are owned by "{{ WODUSER }}"
      become: true
      become_user: root
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: "0755"
      with_items:
        - /usr/local/bin
        - /usr/local/share

    - name: Disable WoD services
      become: true
      become_user: root
      ansible.builtin.systemd:
        state: stopped
        daemon_reload: true
        enabled: false
        name: "{{ item }}"
      ignore_errors: true
      register: ignore_errors_register
      with_items:
        - wod-kill-processes

    - name: Copy WoD service file as ansible template for variable expansion
      become: true
      become_user: root
      ansible.builtin.template:
        src: "{{ item }}"
        dest: /etc/systemd/system/{{ item | basename | regex_replace('\.j2$') }}
        mode: "0644"
      with_fileglob: ['{{ WODBEDIR }}/sys/wod-*.service.j2']

    - name: Enable WoD service
      become: true
      become_user: root
      ansible.builtin.systemd:
        state: started
        daemon_reload: true
        enabled: true
        name: "{{ item }}"
      with_items:
        - wod-kill-processes

    - name: Setup ansible configuration
      ansible.builtin.copy:
        src: "{{ WODBEDIR }}/.ansible.cfg"
        dest: "{{ ansible_env.HOME }}/.ansible.cfg"
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: "0644"

    - name: Configure fail2ban filter
      become: true
      become_user: root
      ansible.builtin.copy:
        src: "{{ WODBEDIR }}/sys/fail2ban.conf"
        dest: /etc/fail2ban/filter.d/jupyterhub.conf
        owner: root
        group: root
        mode: "0644"

    - name: Configure fail2ban jail
      become: true
      become_user: root
      ansible.builtin.copy:
        src: "{{ WODBEDIR }}/sys/fail2ban.jail"
        dest: /etc/fail2ban/jail.local
        owner: root
        group: root
        mode: "0644"

    - name: Configure fail2ban action
      become: true
      become_user: root
      ansible.builtin.copy:
        src: "{{ WODBEDIR }}/sys/fail2ban.action"
        dest: /etc/fail2ban/action.d/jupyterhub.conf
        owner: root
        group: root
        mode: "0755"

    - name: Enable fail2ban
      become: true
      become_user: root
      ansible.builtin.systemd:
        state: started
        daemon_reload: true
        enabled: true
        name: fail2ban

    - name: Test private tasks YAML file
      ansible.builtin.command: ls "{{ ANSIBLEPRIVDIR }}/install_frontend.yml"
      register: acj_path
      failed_when: false
      changed_when: false

    - name: Now call private tasks if available
      ansible.builtin.include_tasks: "{{ ANSIBLEPRIVDIR }}/install_frontend.yml"
      when:
        - acj_path.rc == 0
