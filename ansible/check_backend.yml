---
- name: Playbook to check periodically WoD backend
  hosts: all
  gather_facts: true
  tasks:
    - name: Ensure that this a compliant WoD system
      ansible.builtin.include_tasks: "{{ ANSIBLEDIR }}/check_system.yml"

    - name: Setup backend ufw firewall TCP rules
      become: true
      become_user: root
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
        state: enabled
      with_items:
        - "{{ WODBEPORT }}"
        - "{{ WODPOSTPORT }}"
      when:
        - ansible_distribution == "Ubuntu"
        - ansible_distribution_major_version >= "20"

    - name: Setup backend firewalld TCP rules
      become: true
      become_user: root
      ansible.posix.firewalld:
        port: "{{ item }}/tcp"
        permanent: true
        state: enabled
      with_items:
        - "{{ WODBEPORT }}"
        - "{{ WODPOSTPORT }}"
      when:
        - ansible_distribution == "CentOS"
        - ansible_distribution_major_version >= "7"

    - name: If needed create directory "{{ JPHUB }}"
      become: true
      become_user: root
      ansible.builtin.file:
        path: "{{ JPHUB }}"
        state: directory
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: "0751"

    - name: Ensure existence of directory etc/jupyterhub under "{{ JPHUB }}"
      ansible.builtin.file:
        path: "{{ JPHUB }}/etc/jupyterhub"
        state: directory
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: "0751"

    - name: Ensure listening port in postfix master.cf is configured correctly
      become: true
      become_user: root
      ansible.builtin.lineinfile:
        path: /etc/postfix/master.cf
        regex: ^smtp\s*inet
        line: "{{ WODPOSTPORT }}      inet  n       -       y       -       -       smtpd"
        state: present

    - name: Ensure myhostname in postfix main.cf is configured correctly
      become: true
      become_user: root
      ansible.builtin.lineinfile:
        path: /etc/postfix/main.cf
        regex: ^myhostname =
        line: myhostname = {{ WODBEFQDN }}
        state: present

    - name: Ensure listening addresses in postfix main.cf is configured correctly
      become: true
      become_user: root
      ansible.builtin.lineinfile:
        path: /etc/postfix/main.cf
        regex: ^inet_interfaces =
        line: inet_interfaces =  {{ WODBEFQDN }},localhost
        state: present

    - name: Ensure the mailbox command is correct
      become: true
      become_user: root
      ansible.builtin.lineinfile:
        path: /etc/postfix/main.cf
        regex: ^[#]*mailbox_command =
        line: mailbox_command = /usr/bin/procmail -a "$EXTENSION"
        state: present

    - name: Ensure mydestination in postfix main.cf is configured correctly
      become: true
      become_user: root
      ansible.builtin.lineinfile:
        path: /etc/postfix/main.cf
        regex: ^mydestination =
        line: mydestination = $myhostname, {{ WODBEFQDN.split('.')[0] }}, {{ WODBEEXTFQDN }}, {{ WODBEEXTFQDN.split('.')[0] }}, localhost, localhost.localdomain
        state: present

    - name: Ensure hostname is not modified (useful for vagrant setup e.g.)
      become: true
      become_user: root
      ansible.builtin.lineinfile:
        path: /etc/postfix/main.cf
        regex: ^append_dot_mydomain =
        line: append_dot_mydomain = no
        state: present

    - name: Deploy an instanciated procmailrc conf file
      ansible.builtin.template:
        src: "{{ SYSDIR }}/procmailrc.j2"
        dest: "{{ ansible_env.HOME }}/.procmailrc"
        mode: "0600"

    - name: Enable postfix service
      become: true
      become_user: root
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        enabled: true
        name: postfix

    - name: Setup crontab for daily delivery of ansible instantiated files
      become: true
      become_user: root
      ansible.builtin.cron:
        name: wod-deliver
        minute: "{{ 59 | random(seed=inventory_hostname) }} "
        hour: "04"
        user: "{{ WODUSER }}"
        job: /usr/local/bin/wod-deliver
        cron_file: wod-deliver
        state: present

    - name: Setup crontab for daily check of template in dev user home dir
      become: true
      become_user: root
      ansible.builtin.cron:
        name: wod-check-template
        minute: "{{ 59 | random(seed=inventory_hostname) }} "
        hour: "05"
        user: root
        job: /usr/local/bin/wod-check-template
        cron_file: wod-check-template
        state: present

    # If you name compiled script shc with one of the following prefix, it will be expanded by deliver
    # If you name it with a get-... prefix, it won't and thus will be templated by compile_scripts later at WoD delivery time
    # Works for both private and public parts
    - name: Deliver create/reset/setup scripts as ansible template for variable expansion
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ item | dirname }}/{{ item | basename | regex_replace('.j2$') }}"
        mode: "0755"
      with_fileglob: ['{{ SCRIPTDIR }}/*.sh*.j2', '{{ SCRIPTPRIVDIR }}/*.sh*.j2']

    - name: Deliver variables files as ansible template for variable expansion
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ item | dirname }}/{{ item | basename | regex_replace('.j2$') }}"
        mode: "0644"
      with_fileglob: ['{{ ANSIBLEDIR }}/{{ PBKDIR }}/*.yml.j2', '{{ ANSIBLEPRIVDIR }}/{{ PBKDIR }}/*.yml.j2']

    - name: "Ensure existence of directory {{ STUDDIR }}"
      become: true
      become_user: root
      ansible.builtin.file:
        path: "{{ STUDDIR }}"
        state: directory
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: "0711"

    - name: Lockdown /home
      become: true
      become_user: root
      ansible.builtin.file:
        path: /home
        state: directory
        owner: root
        group: root
        mode: "0711"

    - name: "Ensure existence of directory .mail under {{ ansible_env.HOME }}"
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.mail"
        state: directory
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: "0750"

    - name: "Ensure that file vault_secret exists in {{ ANSIBLEPRIVDIR }}"
      ansible.builtin.lineinfile:
        path: "{{ ANSIBLEPRIVDIR }}/vault_secret"
        regexp: ^.*$
        line: "{{ VAULTPWD }}"

    - name: "Fix modes for vault_secret under {{ ANSIBLEPRIVDIR }}"
      ansible.builtin.file:
        path: "{{ ANSIBLEPRIVDIR }}/vault_secret"
        mode: "0600"

    - name: Ensure that required nbconvert directories exists
      become: true
      become_user: root
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: "0755"
      with_items:
        - /usr/local/share/jupyter/nbconvert/
        - /usr/local/share/jupyter/nbconvert/templates/
        - /usr/local/share/jupyter/nbconvert/templates/html/
        - /usr/local/share/jupyter/nbconvert/templates/latex/
        - "{{ JPHUB }}/share/jupyter/nbconvert/templates/html/"

    - name: Deliver images in the static web server zone
      become: true
      become_user: root
      copy:
        src: "{{ item }}"
        dest: "{{ item.path | regex_replace(WODBEDIR, JPHUB) | regex_replace('/img', '/share/jupyterhub/static') }}"
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: "0644"
      with_fileglob: ['{{ WODBEDIR }}/img/*']

    # Perform private part before users management to allow interruption of the deliver script
    # during normal operations - waiting till end of users management can take hours for 2000 users.
    # Potential impact: private scripts are run before users creation, so may miss some part of setup.
    - name: Test private tasks YAML file
      ansible.builtin.command: ls "{{ ANSIBLEPRIVDIR }}/check_backend.yml"
      register: acj_path
      failed_when: false
      changed_when: false

    - name: Now call private tasks if available
      ansible.builtin.include_tasks: "{{ ANSIBLEPRIVDIR }}/check_backend.yml"
      when:
        - acj_path.rc == 0

    - name: Copy WoD service file as ansible template for variable expansion
      become: true
      become_user: root
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "/etc/systemd/system/{{ item | basename | regex_replace('.j2$') }}"
        mode: "0644"
      with_fileglob: ['{{ SYSDIR }}//jupyterhub.service.j2', '{{ SYSPRIVDIR }}//jupyterhub.service.j2']

    # Done after private part, which may affect branding
    - name: Enable backend WoD services
      become: true
      become_user: root
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        enabled: true
        name: "{{ item }}"
      with_items:
        - jupyterhub

    # Users management
    - name: Remove existing jupyterhub users
      ansible.builtin.command:
        cmd: "curl -X DELETE --silent -k -H 'Authorization: token {{ WODBETOKEN }}' {{ WODBEAPIURL }}/hub/api/users/{{ 'student%s' | format(item) }}"
        warn: false
      loop: "{{ range(USERMIN, USERMAX + 1) | list }}"
      when: CLEAN | bool
      register: result
      changed_when: result.rc != 0

    - name: Remove Linux users and their home directory
      become: true
      become_user: root
      ansible.builtin.user:
        name: "{{ 'student%s' | format(item) }}"
        state: absent
        remove: true
        force: true
      loop: "{{ range(USERMIN, USERMAX + 1) | list }}"
      when: CLEAN | bool

    - name: Ensure dedicated students groups exist
      become: true
      become_user: root
      ansible.builtin.group:
        name: "{{ 'student%s' | format(item) }}"
        state: present
        gid: "{{ item + GIDBASE }}"
      loop: "{{ range(USERMIN, USERMAX + 1) | list }}"

    - name: Ensure Linux students users exists with their home dir
      become: true
      become_user: root
      ansible.builtin.user:
        name: "{{ 'student%s' | format(item) }}"
        state: present
        create_home: true
        home: "{{ STUDDIR }}/{{ 'student%s' | format(item) }}"
        comment: "{{ 'student%s' | format(item) }}"
        shell: /bin/bash
        uid: "{{ item + UIDBASE }}"
        group: "{{ 'student%s' | format(item) }}"
      loop: "{{ range(USERMIN, USERMAX + 1) | list }}"

    - name: Ensure jupyterhub students users exist
      ansible.builtin.uri:
        url: "{{ WODBEAPIURL }}/hub/api/users/{{ 'student%s' | format(item) }}"
        headers:
          Authorization: token {{ WODBETOKEN }}
        method: POST
        status_code: 201
      loop: "{{ range(USERMIN, USERMAX + 1) | list }}"

    - name: Setup ACL for students with the account {{ WODUSER }}
      become: true
      become_user: root
      ansible.posix.acl:
        path: "{{ STUDDIR }}/{{ 'student%s' | format(item) }}"
        recursive: true
        entity: "{{ WODUSER }}"
        etype: user
        permissions: rwx
        state: present
        recalculate_mask: mask
      loop: "{{ range(USERMIN, USERMAX + 1) | list }}"

    - name: Setup default ACL for students with account "{{ WODUSER }}"
      become: true
      become_user: root
      ansible.posix.acl:
        path: "{{ STUDDIR }}/{{ 'student%s' | format(item) }}"
        recursive: true
        entity: "{{ WODUSER }}"
        etype: user
        permissions: rwx
        default: true
        state: present
        recalculate_mask: mask
      loop: "{{ range(USERMIN, USERMAX + 1) | list }}"
