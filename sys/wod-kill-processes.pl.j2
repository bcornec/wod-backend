#!/usr/bin/perl -w
use strict;
use Proc::ProcessTable;
use Data::Dumper;

# Process eevry 60 seconds by default
my $loop = 60;

# Max CPU usage tolerated
my $maxcpu = 0.98;

# Commands that are black listed/killed
my @blacklistcmd = (
		"packetcrypt",
		"ethminer",
);
# Commands that are white listed/kept using cmndline
my @whitelistcmd = (
		"{{ JPHUB }}/bin/jupyterhub-singleuser",
		# Isn't it a security hole as dotnet can launch whatever I guess
		"dotnet",
		"dotnet-interactive",
		"-home={{ JPHUB }}/lib/python3.*/site-packages/run_kotlin_kernel",
);
my $logf = "$ENV{'HOME'}/.mail/wod-kill-processes.log";

# Do not change below
open(LOG,">> $logf") || die "Unable to create $logf";

while (1) {

	my $t = Proc::ProcessTable->new;
	# Maximum time allowed for commands to run: 5 minutes
	my $maxruntime = time-5*60;
	# Maximum time allowed for student jupyterhub notebook server to run: 4 hours
	my $maxjuptime = time-4*60*60;

	my %kill = ();
	foreach my $p ( @{$t->table} ) {
		my $uid = $p->uid;
		my ($student,$blob) = getpwuid($uid);
		if ($student =~ /student[0-9]+/) {
			$kill{$student}->{fname} = ();
			$kill{$student}->{pid} = ();
			$kill{$student}->{uid} = $uid;
		}
		my $pid = $p->pid;
		my $fname = $p->fname;
		my $cmndline = $p->cmndline;
		#print(LOG "Analyses process $fname ($pid) for user $student ($uid)\n");
		# Kill black listed commands
		if (grep(/$fname/,@blacklistcmd)) {
			push(@{$kill{$student}->{fname}},$fname);
			push(@{$kill{$student}->{pid}},$pid);
			$kill{$student}{uid} = $uid;
			print(LOG "Will kill black listed process $fname ($pid) for user $student ($uid)\n");
			print(LOG Dumper($p)."\n");
		}
		# Kill commands running for more than maxruntime, using CPU and not whitelisted run by a student
		my $st = $p->start();
		my $pcpu = $p->pctcpu;
		if (($st <= $maxruntime) && ($pcpu+0 >= $maxcpu) && ($student =~ /student[0-9]+/) ) {
			for my $i (@whitelistcmd) {
				if ($cmndline !~ /\b$i\b/) {
					push(@{$kill{$student}->{fname}},$fname);
					push(@{$kill{$student}->{pid}},$pid);
					$kill{$student}{uid} = $uid;
					print(LOG "Will kill process exceeding $maxcpu CPU $fname ($pid) for user $student ($uid)\n");
					print(LOG "Start:$st maxruntime: $maxruntime\n");
					print(LOG Dumper($p)."\n");
				}
			}
		}
		# Kill jupyter server kernels older than maxjuptime and processes of that student
		if (($st <= $maxjuptime) && ($cmndline =~ /kernel/ ) && ($student =~ /student[0-9]+/)) {
			push(@{$kill{$student}->{fname}},$fname);
			push(@{$kill{$student}->{pid}},$pid);
			$kill{$student}{uid} = $uid;
			print(LOG "Will kill jupyter process $fname ($pid) for user $student ($uid)\n");
			print(LOG "Start:$st maxjuptime: $maxjuptime\n");
			print(LOG Dumper($p)."\n");
		}
	}

	# Now kill all process identified and sleep
	for my $s (keys %kill) {
			# Skip empty users
		    my $fn = 0;
			$fn = @{ $kill{$s}->{fname} } if (defined $kill{$s}->{fname});
			next if ($fn == 0);
			# The remaining ones should be killed
			print(LOG "Killing all processes for user $s ($kill{$s}->{uid})\n");
			foreach my $i (0..$#{$kill{$s}->{fname}}) {
				print(LOG "--> ${$kill{$s}->{fname}}[$i] (@{$kill{$s}->{pid}}[$i])\n");
			}
			system("sudo pkill -KILL -U $s");
			# Erase student dir as well
			system("/usr/local/bin/wod-test-action.sh PURGE VOID $s");
	}
	# Do that every timeout value
	sleep($loop);

}
close(LOG);
